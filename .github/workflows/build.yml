name: Build Ruby

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} (${{ matrix.arch }}-bit)
    strategy:
      fail-fast: false
      matrix:
        os:
        # - ubuntu-20.04
        - macos-10.15
        # - windows-2019
        arch:
        - 64
        - 32
        exclude:
          - os: macos-10.15
            arch: 32
    defaults:
      run:
        shell: bash
    env:
      RUBY_VERSION: 2.7.3
    steps:
    - name: Set up environment
      run: |
        echo "RUBY_PREFIX=${HOME}/ruby-install" >> $GITHUB_ENV
        RUBY_ARCH=${{ matrix.arch }}
        if [[ "${RUBY_ARCH}" = 32 ]]; then
          RUBY_ARCH_VCVARS=x86
        else
          RUBY_ARCH_VCVARS=amd64
        fi
        echo "RUBY_ARCH=${RUBY_ARCH}" >> $GITHUB_ENV
        echo "RUBY_ARCH_VCVARS=${RUBY_ARCH_VCVARS}" >> $GITHUB_ENV
        echo "GHA_OS_TAG=$(echo '${{ runner.os }}' | tr '[[:upper:]]' '[[:lower:]]')${{ matrix.arch }}" >> $GITHUB_ENV
        echo "GHA_RUBY_TAG=${RUBY_VERSION//./_}" >> $GITHUB_ENV
    - name: Clone ruby-build
      uses: actions/checkout@v2
    - name: Fetch Ruby cache
      uses: actions/cache@v2
      with:
        path: ruby*.tar.gz
        key: ${{ env.RUBY_VERSION }}-${{ hashFiles('scripts/download.bash') }}
    - name: Download Ruby
      run: |
        RUBY_SOURCE="$(pwd)/ruby"
        ./scripts/download.bash "$RUBY_VERSION" "$RUBY_SOURCE"
        echo "RUBY_SOURCE=$RUBY_SOURCE" >> $GITHUB_ENV
    - name: Set up MSVC (Windows-specific)
      if: ${{ startswith(matrix.os, 'windows') }}
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ env.RUBY_ARCH_VCVARS }}
        toolset: "14.0"
    - name: Install dependencies
      run: ./scripts/install_deps.bash
    - name: Configure
      id: configure
      run: ./scripts/configure.bash
    - name: Upload config.log
      if: ${{ failure() && steps.configure.outcome == 'failure' }}
      uses: actions/upload-artifact@v2
      with:
        name: logs-${{ env.GHA_OS_TAG }}
        path: |
          ruby/config.log
          ruby/configure
    - name: Build
      run: ./scripts/build.bash
    - name: Test
      run: ./scripts/test.bash
    - name: Package
      id: package
      run: |
        mkdir ruby-package
        ./scripts/package.bash "$(pwd)/ruby-package"
        echo "::set-output name=dll_path::$(ls ruby-package/*)"
    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: libruby-${{ env.GHA_RUBY_TAG }}-${{ env.GHA_OS_TAG }}
        path: ${{ steps.package.outputs.dll_path }}
